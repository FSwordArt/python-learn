import tensorflow as tf
import numpy as np

# =============================================================================
# print(tf.constant([True,False]))
# print(tf.constant('hello,tensorflow'))
# =============================================================================

# =============================================================================
# a = np.array(5)
# print(a.dtype)
#
# aa = tf.convert_to_tensor(a)
# print(aa)
# #使用tf.cast进行数据类型的转换
# aaa = tf.cast(aa,dtype = tf.float64)
# print(aaa)
# =============================================================================

# =============================================================================
# a = tf.convert_to_tensor(np.ones([2,3]))
# print(a)
# =============================================================================

# =============================================================================
# a = tf.zeros([2,3,3])
# print(tf.zeros_like(a))
# =============================================================================

# =============================================================================
# #填充为一个2*2的全是1的矩阵
# a = tf.fill([2,2],1)
# print(a)
# =============================================================================

# =============================================================================
# #随机初始化--正态分布
# a = tf.random.normal([2,2],mean = 0,stddev = 1)
# print(a)
# #truncate 截断的正态分布,在标准正太分布，截去某一部分
# b = tf.random.truncated_normal([2,2],mean = 0,stddev = 1)
# print(b)
# =============================================================================

# =============================================================================
# #随机初始化--均匀分布
# a = tf.random.uniform([2,2],minval = 0,maxval = 1)
# print(a)
# =============================================================================

# =============================================================================
# #随机打散
# idx = tf.range(10)
# idx = tf.random.shuffle(idx)
# print(idx)
#
# a = tf.random.normal([10,784])
# b = tf.random.uniform([10],maxval = 10,dtype=tf.int32)
# print(a)
# print(b)
#
# a = tf.gather(a,idx)
# b = tf.gather(b,idx)
# print(a)
# print(b)
# =============================================================================

# =============================================================================
# out = tf.random.uniform([4,10])
# y = tf.range(4)
# y = tf.one_hot(y,depth = 10)
# print(y)
#
# loss = tf.keras.losses.mse(y,out)
# print(loss)
#
# loss = tf.reduce_mean(loss)
# print(loss)
# =============================================================================

a = tf.random.normal([4,28,28,3])

a[1].shape